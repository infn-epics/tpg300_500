################################################################################
# Database for TPG gauges for
# TPG300 Gauge Controller
# CONTROLLERNAME = devicename of the TPG controller
# SENSOR         = devicename of the gauge
# CHANNEL        = the channel of the gauge
# SOURCE         = the calcout field this gauge is assigned to
################################################################################


#
# Measurement ranges for cold cathode from 5E-3 to
#  PE 300DC9   1E-9
#  CP 300C9    5E-9
#  CP 300C10   1E-10
#  CP 300T11   1E-11
#  CP 300T11L  1E-11
#


record(stringin, "${P}${R}ChanR")
{
  field(DESC, "The channel this gauge is connected to")
  field(DISP, "1")
  field(PINI, "YES")
  field(VAL,  "${SENSOR}")
}


record(bi, "${P}${R}ValidR")
{
  field(INP,  "${CONTROLLERNAME}${R}${SENSOR}_ValidR CP")
  field(ZNAM, "Incorrect Gauge Type")
  field(ONAM, "Correct Gauge Type")
  field(ZSV,  "MAJOR")

  field(FLNK, "${P}${R}iDisconnectTrigR")
}


record(calcout, "${P}${R}iRlyValidCalc")
{
  field(INPA, "${P}${R}Rly1_ValidR CP")
  field(INPB, "${P}${R}Rly2_ValidR CP")
  field(CALC, "A&&B")
  field(OUT,  "${P}${R}RlyValidR PP")
}


record(bi, "${P}${R}RlyValidR")
{
  field(DESC, "Gauge-relay assignment status")
  field(ZNAM, "Invalid Relay Assignment")
  field(ONAM, "Correct Relay Assignment")
  field(ZSV,  "MAJOR")

  field(DISV, "0")
  field(DISS, "INVALID")
  field(SDIS, "${P}${R}ValidR")
}


# Fixed to valid as TPG modules does not have serial numbers
record(bi, "${P}${R}ModuleValidR")
{
  field(DESC, "Module is the same as commissioned")
  field(ZNAM, "Invalid")
  field(ONAM, "Valid")

  field(VAL,  "1")
  field(PINI, "YES")
  field(DISP, "1")
}


record(calcout, "${P}${R}iDisconnectTrigR")
{
  field(DESC, "Trigger DisconnectTrigR when ! valid")
  field(INPA, "${P}${R}ValidR")
  field(INPB, "${P}${R}DisconnectTrigR")
  field(CALC, "A?0:(B<10?B+1:1)")
  field(OOPT, "When Non-zero")
  field(OUT,  "${P}${R}DisconnectTrigR PP")
}


record(longin, "${P}${R}DisconnectTrigR")
{
# This PV is a special ValidR: it changes value when a disconnect occurs
  field(DESC, "PV is processed on disconnects")
}


record(stringin, "${P}${R}SensorTypeR")
{
  field(DISP, "1")
  field(INP,  "${CONTROLLERNAME}${R}${SENSOR}_iSensorTypeR")

  field(DISV, "0")
  field(DISS, "INVALID")
  field(SDIS, "${CONTROLLERNAME}${R}CommsOK")
}


record(scalcout, "${P}${R}iPrsInR")
{
  alias("${CONTROLLERNAME}${R}${SENSOR}_iPrsInR")
  field(DTYP, "stream")
  field(OUT,  "@vac_ctrl_tpg300_500.proto get_pressure(${SENSOR}) ${ASYNPORT}")
  field(SCAN, "Event")
  field(EVNT, "${CONTROLLERNAME}-1")
  field(CALC, "42")

  field(FLNK, "${P}${R}iPrs-FO")

  field(DISV, "0")
  field(DISS, "INVALID")
  field(SDIS, "${P}${R}ValidR CP")
}


record(fanout, "${P}${R}iPrs-FO")
{
# Parse the pressure value as a double. Takes care of changing the value to 1000 mBar if the gauge is switched off or is in error
  field(LNK1, "${P}${R}iPrsR")
# Parse the gauge status as mbbi
  field(LNK2, "${P}${R}GaugeStatR")
# Store either the pressure value or the gauge status as string
  field(LNK3, "${P}${R}iPrsR-STR")
# Convert the gauge status to pressure status
  field(LNK4, "${P}${R}iPrsStatS")

  field(DISV, "42")
  field(SDIS, "${P}${R}DisconnectTrigR CP")
}


record(stringout, "${P}${R}iUnitChanged")
{
  field(DOL,  "${CONTROLLERNAME}${R}Unit-RB CPP")
  field(OMSL, "closed_loop")
  field(OUT,  "${P}${R}PrsR.EGU NPP")
}


# Predefined pressure value of invalid status
record(ao, "${P}${R}InvPrsS")
{
  field(VAL,  "1000")
  field(PINI, "YES")
}


record(ai, "${P}${R}iPrsR")
{
  field(INP,  "${P}${R}iPrsInR.BB MSS")
  field(PREC, "2")
  field(EGU,  "${EGU=mBar}")

  field(FLNK, "${P}${R}iPrsCalc")
}


record(calcout, "${P}${R}iPrsCalc")
{
  field(INPA, "${P}${R}iPrsInR.A")
  field(INPB, "${P}${R}iPrsR MSS")
  field(INPC, "${P}${R}InvPrsS")
  field(CALC, "A<3?B:C")
  field(OUT,  "${P}${R}PrsR PP MSS")
}


record(ai, "${P}${R}PrsR")
{
  field(PREC, "2")
  field(EGU,  "${EGU=mBar}")
# Archive every data point
  field(MDEL, "-1")
  field(ADEL, "-1")


  field(DISV, "0")
  field(DISS, "INVALID")
  field(SDIS, "${P}${R}ValidR")
}


record(scalcout, "${P}${R}iPrsR-STR")
{
  field(INPA, "${P}${R}GaugeStatR")
  field(INAA, "${P}${R}GaugeStatR")
  field(INBB, "${P}${R}iPrsInR.BB")
  field(CALC, "A?AA:BB")
  field(OUT,  "${P}${R}PrsR-STR PP")
}


record(stringin, "${P}${R}PrsR-STR")
{
  field(DISV, "0")
  field(DISS, "INVALID")
  field(SDIS, "${P}${R}ValidR")
}


record(mbbi, "${P}${R}GaugeStatR")
{
  field(INP,  "${P}${R}iPrsInR.A MSS")

  field(ZRVL, "0")
  field(ZRST, "DATA OK")

  field(ONVL, "1")
  field(ONST, "UNDERRANGE")

  field(TWVL, "2")
  field(TWST, "OVERRANGE")

  field(THVL, "3")
  field(THST, "MEASUREMENT CIRCUIT ERROR")

  field(FRVL, "4")
  field(FRST, "MEASUREMENT CIRCUIT OFF")

  field(FVVL, "5")
  field(FVST, "NO HARDWARE")

  field(DISV, "0")
  field(DISS, "INVALID")
  field(SDIS, "${P}${R}ValidR")
}


record(calc, "${P}${R}iCalcStat")
{
# Increase GaugeStat value if INVALID
  field(INPA, "${P}${R}GaugeStatR")
  field(INPB, "${P}${R}GaugeStatR.SEVR")
  # SEVR == INVALID
  field(CALC, "C:=(B==3 ? 0 : A + 1);C")
}


record(mbbo, "${P}${R}iPrsStatS")
{
  field(DTYP, "Raw Soft Channel")
  field(DOL,  "${P}${R}iCalcStat PP MSS")
  field(OMSL, "closed_loop")
  field(OUT,  "${P}${R}PrsStatR MSS PP")

  # INVALID
  #  -  0
  field(ZRVL, "0")

  # ON:
  #  -  1 -- DATA OK
  field(ONVL, "1")

  # OFF:
  #  -  5 -- MEASUREMENT CIRCUIT OFF
  field(FVVL, "2")

  # ERROR:
  #  -  4 -- MEASUREMENT CIRCUIT ERROR
  #  -  6 -- NO HARDWARE
  field(FRVL, "3")
  field(SXVL, "3")

  # OVER-RANGE:
  #  -  3 -- OVERRANGE
  field(THVL, "4")

  # UNDER-RANGE:
  #  -  2 -- UNDERRANGE
  field(TWVL, "5")
}


record(mbbi, "${P}${R}PrsStatR")
{
  field(DESC, "Status of channel ${SENSOR}")

  field(ZRVL, "0")
  field(ZRST, "INVALID")

  field(ONVL, "1")
  field(ONST, "ON")

  field(TWVL, "2")
  field(TWST, "OFF")

  field(THVL, "3")
  field(THST, "ERROR")
  field(THSV, "MAJOR")

  field(FRVL, "4")
  field(FRST, "OVER-RANGE")

  field(FVVL, "5")
  field(FVST, "UNDER-RANGE")

  field(DISV, "0")
  field(DISS, "INVALID")
  field(SDIS, "${P}${R}ValidR")
}


record(mbbi, "${P}${R}CtrlMode-RB")
{
  field(INP,  "${CONTROLLERNAME}${R}iSensorCtrlModes-RB.${SOURCE} CP MSS")

  field(ZRVL, "0")
  field(ZRST, "NO SENSOR")

  field(ONVL, "1")
  field(ONST, "OFF")

  field(TWVL, "2")
  field(TWST, "AUTO")

  field(THVL, "3")
  field(THST, "ON")

  field(DISV, "0")
  field(DISS, "INVALID")
  field(SDIS, "${P}${R}ValidR CP")
}


record(mbbo, "${P}${R}CtrlModeS")
{
  field(DTYP, "Raw Soft Channel")
  field(OUT,  "${P}${R}iCtrlModeCommitS.A PP")

  field(ZRVL, "1")
  field(ZRST, "OFF")

  field(ONVL, "2")
  field(ONST, "AUTO")

  field(TWVL, "3")
  field(TWST, "ON")

  field(DISV, "0")
  field(DISS, "INVALID")
  field(SDIS, "${P}${R}ValidR")
}


record(calcout, "${P}${R}iCtrlModeCommitS")
{
  field(DTYP, "stream")
  field(OUT,  "@vac_ctrl_tpg300_500.proto set_mode_${SENSOR} ${ASYNPORT}")

  field(FLNK, "${CONTROLLERNAME}${R}iSensorCtrlModes-RB.PROC CA")

  field(DISV, "0")
  field(DISS, "INVALID")
  field(SDIS, "${P}${R}ValidR")
}


record(calc, "${P}${R}iCtrlModeCommitStat")
{
  field(INPA, "${P}${R}iCtrlModeCommitS.STAT")
# CALC_ALARM == 12
  field(CALC, "A==12")
}


record(sel, "${P}${R}iCtrlModeError")
{
  field(SELM, "Specified")
  field(NVL,  "${P}${R}iCtrlModeCommitStat PP")

  field(INPA, "${P}${R}iCtrlModeCommitS.E CP MSS")
  field(INPB, "${P}${R}iCtrlModeCommitS.E")
}


record(mbbi, "${P}${R}CtrlModeS-ErrorR")
{
  field(DTYP, "Raw Soft Channel")
  field(INP,  "${P}${R}iCtrlModeError CP MSS")

  field(ZRVL, "0")
  field(ZRST, "NO ERROR")

  field(ONVL, "1")
  field(ONST, "SYNTAX ERROR")
  field(ONSV, "MAJOR")

  field(TWVL, "10")
  field(TWST, "INVALID PARAMETER")
  field(TWSV, "MAJOR")

  field(THVL, "100")
  field(THST, "NO HARDWARE")
  field(THSV, "MAJOR")

  field(FRVL, "1000")
  field(FRST, "TPG ERROR")
  field(FRSV, "MAJOR")

  field(DISV, "0")
  field(DISS, "INVALID")
  field(SDIS, "${P}${R}ValidR CP")
}


record(stringin, "${P}${R}CtrlNameR")
{
  field(DESC, "Name of the gauge controller device")
  field(DISP, "1")
  field(PINI, "YES")
  field(VAL,  "${CONTROLLERNAME}")
}


alias("${CONTROLLERNAME}${R}UITypeR",                    "${P}${R}UITypeR")

alias("${CONTROLLERNAME}${R}${SENSOR}_FltTimS",          "${P}${R}FltTimS")

alias("${CONTROLLERNAME}${R}${SENSOR}_FltTim-RB",        "${P}${R}FltTim-RB")


record("*", "${CONTROLLERNAME}${R}${SENSOR}_DevNameR")
{
  alias("${P}${R}DevNameR")
  field(PINI, "YES")
  field(VAL,  "${P}")
}


record("*", "${CONTROLLERNAME}${R}${SENSOR}_NumOfRlysR")
{
  alias("${P}${R}NumOfRlysR")
  field(VAL,  "2")
  field(PINI, "YES")
}


record("*", "${CONTROLLERNAME}${R}${SENSOR}_iCheckModType")
{
  field(CALC, "(A&&(AA[0,1]=='${BOARD}'||AA[0,1]=='CP'))?'1':'0'")
}


record("*", "${CONTROLLERNAME}${R}${SENSOR}_iSensorTypeR")
{
  field(TWST, "${GAUGE}")
  field(TWVL, "2")
}


record("*", "${CONTROLLERNAME}${R}${SENSOR}_iSensorType-FO")
{
  field(OUTC, "${P}${R}SensorTypeR.PROC")
}


include "vac_gauge_tpg500.db"
