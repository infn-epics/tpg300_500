record(event, "$(P):iScan10Event")
{
  field(SCAN, "10 second")
  field(VAL,  "$(P)-10")
  field(PINI, "YES")

  # field(FLNK, "$(P):iRereadCalc")
}

record(bo, "$(P):DISABLE") 
{
    field(DESC, "Disable comms")
    field(PINI, "YES")
    field(VAL, "$(DISABLE=0)")
    field(OMSL, "supervisory")
    field(ZNAM, "COMMS ENABLED")
    field(ONAM, "COMMS DISABLED")
}


# record(stringin, "$(P):SLOTS_RAW") {
#   field(DTYP, "stream")
#   field(INP, "@devTPGx00.proto get_slots_raw ${PORT}")
#   field(FLNK, "$(P):ParseSlots")
#   field(SCAN, "Event")
#   field(EVNT, "$(P)-10")

# }


# record(aSub, "$(P):ParseSlots") {
#   field(INAM, "initParseSlots")
#   field(SNAM, "parseSlots")
#   field(FTA, "STRING")
#   field(FTA, "STRING")
#   field(INPA, "$(P):SLOTS_RAW CP")
#   field(FTVA, "STRING")
#   field(FTVB, "STRING")
#   field(FTVC, "STRING")
#   field(NOVA, "64")  # Max size for OUTA (SLOT1)
#   field(NOVB, "64")  # Max size for OUTB (SLOT2)
#   field(NOVC, "64") 
#   field(OUTA, "$(P):SLOT1 PP")
#   field(OUTB, "$(P):SLOT2 PP")
#   field(OUTC, "$(P):SLOT3 PP")
# }

record(stringin, "$(P):SLOTS_RAW") {
  field(DTYP, "stream")
  field(INP, "@devTPGx00.proto get_slots($(P):SLOT1,$(P):SLOT2,$(P):SLOT3) ${PORT}")
#  field(FLNK, "$(P):ParseSlots")
  field(SCAN, "Event")
  field(EVNT, "$(P)-10")
  field(SDIS, "$(P):SLOTS_INIT_OK")
  field(DISV, "1")
}


record(stringin, "$(P):SLOT1") {
  field(VAL, "")
}

record(stringin, "$(P):SLOT2") {
  field(VAL, "")
}

record(stringin, "$(P):SLOT3") {
  field(VAL, "")
}

record(stringin, "$(P):FWVER")
{
  field(DTYP, "stream")
  field(INP,  "@devTPGx00.proto get_info(PNR) $(PORT)")
  field(PINI, "YES")
  field(SCAN, "Passive")

}
record(stringin, "$(P):DEVTYPE") {
  field(VAL, "TPG300")
  field(DESC, "Device type")
  field(SCAN, "Passive")
  field(DTYP, "Soft Channel")
  field(PINI, "YES")
}

record(stringin, "$(P):ARTNUMB") {
  field(VAL, "")
  field(DESC, "Device type")
  field(SCAN, "Passive")
  field(DTYP, "Soft Channel")
  field(PINI, "YES")
}

record(stringin, "$(P):HWVER") {
  field(VAL, "NA")
  field(DESC, "HW Version")
  field(SCAN, "Passive")
  field(DTYP, "Soft Channel")
  field(PINI, "YES")
}


record(mbbi, "$(P):UNITS_RB") 
{
    field(DESC, "Units readback")
    field(SCAN, "Passive")
    field(DTYP, "stream")
    field(INP,  "@devTPGx00.proto getUnits $(PORT)")
    field(ZRST, "mbar")
    field(ZRVL, "1")
    field(ONST, "Torr")
    field(ONVL, "2")
    field(TWST, "Pa")
    field(TWVL, "3")
     field(THST, "hPascal")
     field(THVL, "0")
     field(FRST, "Micron")
    field(FRVL, "4")
    field(FVST, "Volt")
    field(FVVL, "5")
    field(SXST, "Ampere")
    field(SXVL, "6")
    
    info(INTEREST, "HIGH")
}


record(mbbo, "$(P):UNITS_SP") 
{
    field(DESC, "Units setpoint")
    field(SCAN, "Passive")
    field(DTYP, "stream")
    field(OUT,  "@devTPGx00.proto setUnits $(PORT)")
    field(ZRST, "mbar")
    field(ZRVL, "1")
    field(ONST, "Torr")
    field(ONVL, "2")
    field(TWST, "Pa")
    field(TWVL, "3")
    field(THST, "hPascal")
    field(THVL, "0")
    field(FRST, "Micron")
    field(FRVL, "4")
    field(FVST, "Volt")
    field(FVVL, "5")
    field(SXST, "Ampere")
    field(SXVL, "6")
    field(FLNK, "$(P):UNITS_RB")
    
}

record(bi, "${P}:UNDERRANGE_CTRL_RB")
{
  field(DTYP, "stream")
  field(INP,  "@devTPGx00.proto get_puc $(PORT)")
  # field(SCAN, "Event")
  # field(EVNT, "${P}-10")
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(ZNAM, "OFF")
  field(ONAM, "ON")

  # field(DISV, "0")
  # field(DISS, "INVALID")
  # field(SDIS, "${P}:CommsOK")
}


record(bo, "${P}:UNDERRANGE_CTRL")
{
  field(DTYP, "stream")
  field(OUT,  "@devTPGx00.proto set_puc $(PORT)")

  field(ZNAM, "OFF")
  field(ONAM, "ON")

  field(FLNK, "${P}:UNDERRANGE_CTRL_RB CP")

  # field(DISV, "0")
  # field(DISS, "INVALID")
  # field(SDIS, "${P}:CommsOK")
}

record(mbbi, "$(P):ERROR")
{
    field(DESC, "Reading the device error status")
    field(DTYP, "stream")
    field(SCAN, "Event")
    field(EVNT, "$(P)-10")
    field(INP, "@devTPGx00.proto getErrorStatus $(PORT)")
    field(ZRST, "No error")
    field(ZRVL, "0")
    field(ONST, "Device error")
    field(ONVL, "8")
    field(ONSV, "MAJOR")
    field(TWST, "No hardware")
    field(TWVL, "4")
    field(TWSV, "INVALID")
    field(THST, "Invalid parameter")
    field(THVL, "2")
    field(THSV, "MINOR")
    field(FRST, "Syntax error")
    field(FRVL, "1")
    field(FRSV, "MINOR")
    info(INTEREST, "HIGH")
}

record(stringout,"$(P):setfilters") {
  field(DTYP, "stream")
  field(OUT,  "@devTPGx00.proto set_filters($(P):A1:FILT_SP.RVAL,$(P):A2:FILT_SP.RVAL,$(P):B1:FILT_SP.RVAL,$(P):B2:FILT_SP.RVAL,$(P):A1:FILT_RB,$(P):A2:FILT_RB,$(P):B1:FILT_RB,$(P):B2:FILT_RB) $(PORT)")
  field(SCAN, "Passive")
}
record(stringout,"$(P):setmodes") {
  field(DTYP, "stream")
  field(OUT,  "@devTPGx00.proto set_modes($(P):A1:MODE_SP.VAL,$(P):A2:MODE_SP.VAL,$(P):B1:MODE_SP.VAL,$(P):B2:MODE_SP.VAL,$(P):A1:MODE_RB,$(P):A2:MODE_RB,$(P):B1:MODE_RB,$(P):B2:MODE_RB) $(PORT)")
  field(SCAN, "Passive")
}


record(stringout,"$(P):functionstatus") {
  field(DTYP, "stream")
  field(OUT,  "@devTPGx00.proto function_status($(P):FUNCTION:1:ENABLE_RB,$(P):FUNCTION:2:ENABLE_RB,$(P):FUNCTION:3:ENABLE_RB,$(P):FUNCTION:4:ENABLE_RB,$(P):FUNCTION:A:ENABLE_RB,$(P):FUNCTION:B:ENABLE_RB) $(PORT)")
  field(SCAN, "Event")
  field(EVNT, "$(P)-10")
  field(PINI, "YES")
  
}
record(scalcout, "$(P):SLOTS_INIT_OK") {

  field(INAA, "$(P):SLOT1 CP")
  field(INBB, "$(P):SLOT2 CP")
  field(INCC, "$(P):SLOT3 CP")
  field(CALC, "(AA != '') && (BB != '') && (CC != '')")
  field(OOPT, "When Non-zero")         # Output when calculation is true
  field(DOPT, "Use CALC")              # Use calculated result as output
  field(VAL, "0")
  field(DESC, "Disable SLOTS_RAW")
}


# record(calcout, "$(P):FUNCTION:SEL:RB:RAW")
# {
#     field(DESC, "Control sending SF get command")
#     field(SCAN, "1 second")
#     field(INPA, "$(P):FUNCTION:VALID")
#     field(CALC, "A")
#     field(OOPT, "When Non-zero")
#     field(OUT, "$(P):FUNCTION:SEL:RB.PROC")
# }

# record(calcout, "$(P):FUNCTION:ASSIGN:SP:OUT:RAW") 
# {
#     field(DESC, "Control sending SF set command")
#     field(SCAN, "Passive")
#     field(INPA, "$(P):FUNCTION:VALID")
#     field(CALC, "A")
#     field(OOPT, "When Non-zero")
#     field(OUT, "$(P):FUNCTION:ASSIGN:SP:OUT.PROC")
# }


# record(ao, "$(P):FUNCTION:LOW:SP")
# {
#     field(DESC, "Setpoint for low threshold")
#     field(SCAN, "Passive")
#     field(PREC, "11")
#     field(DRVL, "0.00000000001")
#     field(DRVH, "9900")
# }

# record(ao, "$(P):FUNCTION:HIGH:SP")
# {
#     field(DESC, "Setpoint for high threshold")
#     field(SCAN, "Passive")
#     field(PREC, "11")
#     field(DRVL, "0.00000000001")
#     field(DRVH, "9900")
# }


# record(longin, "$(P):FUNCTION:ASSIGN")
# {
#     field(SCAN, "Passive")
# }
# alias("$(P):FUNCTION:ASSIGN", "$(P):FUNCTION:ASSIGN:SP:RBV")

# record(stringout, "$(P):FUNCTION:ASSIGN:SP:OUT") 
# {
#     field(DESC, "Sends new settings")
#     field(SCAN, "Passive")
#     field(DTYP, "stream")
#     field(OUT,  "@devTPGx00.proto setFunction($(P):FUNCTION,:LOW:SP,:HIGH:SP,:ASSIGN) $(PORT)")
#     field(SIML, "$(P):SIM")
#     field(SIOL, "$(P):SIM:FUNCTION:ASSIGN:SP:OUT")
#     field(SDIS, "$(P):DISABLE")
# }

# record(stringin, "$(P):FUNCTION:STATUS:RB")
# {
#     field(DESC, "Reading all functions' status")
#     field(DTYP, "stream")
#     field(SCAN, "1 second")
#     field(INP, "@devTPGx00.proto getFunctionsStatus($(P):FUNCTION:STATUS) $(PORT)")
#     field(PINI, "YES")
#     field(SIML, "$(P):SIM")
#     field(SIOL, "$(P):SIM:FUNCTION:STATUS:RB")
#     field(SDIS, "$(P):DISABLE")
# }
