record(ai, "$(P):$(SENSOR):PRES_RB:RAW")
{
    field(DESC, "Raw pressure of $(SENSOR)")
    field(SCAN, "1 second")
    field(DTYP, "stream")
    field(INP,  "@devTPGx00.proto getPressure($(SENSOR),$(P):$(SENSOR):PRES_STAT) $(PORT)") 
    
}

record(calc, "$(P):$(SENSOR):PRES_RB") {
    field(DESC, "Pressure of $(SENSOR)")
    field(INPA, "$(P):$(SENSOR):PRES_RB:RAW CP MS")
    field(INPB, "$(P):$(SENSOR):PRES_STAT CP MS")
    field(CALC, "A")
    field(PREC, "3")
    info(archive, "VAL")
    info(INTEREST, "HIGH")
    field(EGU, "")
    field(ASG, "READONLY")
}
alias ("$(P):$(SENSOR):PRES_RB","$(P):$(NAME):PRES_RB")
## Visible PVs have initial value set to 0 if the SENSORnel is off,
## or 1 when the SENSORnel is on and the VAL field is uncommented

record(bo, "$(P):$(SENSOR):PRES_RB:VISIBLE")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft SENSORnel")
    field(ZNAM, "NO")
    field(ONAM, "YES")
    field(PINI, "YES")
}

record(mbbi, "$(P):$(SENSOR):PRES_STAT")
{
    field(DESC, "Pressure status of $(SENSOR)")
    field(SCAN, "Passive")
    field(DTYP, "Soft SENSORnel")
    field(ZRST, "Measured data okay")
    field(ONST, "Underrange")
    field(ONSV, "$(TPG_UNDERRANGE_ALARM_SEVERITY)")
    field(TWST, "Overrange")
    field(TWSV, "MINOR")
    field(THST, "Point error")
    field(THSV, "MAJOR")
    field(FRST, "Point switched off")
    field(FRSV, "MAJOR")
    field(FVST, "No hardware")
    field(FVSV, "INVALID")
    
}
alias ("$(P):$(SENSOR):PRES_STAT","$(P):$(NAME):PRES_STAT")


record(stringin, "${P}:${R}:${SENSOR}_DevNameR")
{
# FIXME: remove this once the OPIs are updated
  alias("${P}:${R}:${SENSOR}:DevNameR")
  field(DESC, "Devicename of gauge connected to SENSORnel")
  field(DISP, "1")
}


record(stringin, "${P}:${R}:${SENSOR}_SENSORR")
{
# FIXME: remove this once the OPIs are updated
  alias("${P}:${R}:${SENSOR}:SENSORR")
  field(DESC, "The SENSORnel this gauge is connected to")
  field(DISP, "1")
  field(PINI, "YES")
  field(VAL,  "${SENSOR}")
}


record(longin, "${P}:${R}:${SENSOR}_NumOfRlysR")
{
# FIXME: remove this once the OPIs are updated
  alias("${P}:${R}:${SENSOR}:NumOfRlysR")
  field(DESC, "Number of relays assigned to SENSORnel")
  field(DISP, "1")
}


record(scalcout, "${P}:${R}:${SENSOR}_iCheckModType")
{
  field(INAA, "${P}:${R}:Mod${SLOT}_TypeR CP")
  field(INPA, "${P}:${R}:CommsOK CP")
# CALC is specialized in vac_gauge_tpg300.db
  field(CALC, "'0'")

  field(FLNK, "${P}:${R}:${SENSOR}_iCheckType")
}


record(calcout, "${P}:${R}:${SENSOR}_iCheckType")
{
  field(INPA, "${P}:${R}:${SENSOR}_iCheckModType")
  field(INPB, "${P}:${R}:iSensorCtrlModes-RB.${SOURCE} CP")
  field(CALC, "A&&B")
  field(VAL,  "42")
  field(OOPT, "On SENSORge")
  field(OUT,  "${P}:${R}:${SENSOR}_ValidR PP")
}


record(calcout, "${P}:${R}:${SENSOR}_iSetType")
{
  field(INPA, "${P}:${R}:CommsOK CP")
  field(INPB, "${P}:${R}:iSensorCtrlModes-RB.${SOURCE} CP")
  field(INPC, "${P}:${R}:${SENSOR}_ValidR CP")
  field(CALC, "(A?4:0)+(B?2:0)+(C?1:0)")
  field(OOPT, "On SENSORge")
  field(DOPT, "Use OCAL")
  field(OCAL, "A ? (B ? (2 * C) : 1) : 0")
  field(VAL,  "42")
  field(OUT,  "${P}:${R}:${SENSOR}_iSensorType-FO PP")
}


record(dfanout, "${P}:${R}:${SENSOR}_iSensorType-FO")
{
  field(SELM, "All")
  field(OUTA, "${P}:${R}:${SENSOR}_iSensorTypeR PP")
  field(OUTB, "${P}:${R}:${SENSOR}_SensorTypeR.PROC")
}


record(mbbi, "${P}:${R}:${SENSOR}_iSensorTypeR")
{
# TWVL and TWST are set by vac_gauge_tpg300.db
  field(ZRVL, "0")
  field(ZRST, "N/A")

  field(ONVL, "1")
  field(ONST, "N/C")

  field(DISP, "1")
  field(PINI, "YES")
  field(VAL,  "0")
}


record(stringin, "${P}:${R}:${SENSOR}_SensorTypeR")
{
# FIXME: remove this once the OPIs are updated
  alias("${P}:${R}:${SENSOR}:SensorTypeR")
  field(DISP, "1")
  field(INP,  "${P}:${R}:${SENSOR}_iSensorTypeR")

  field(DISV, "0")
  field(DISS, "INVALID")
  field(SDIS, "${P}:${R}:CommsOK")
}


record(bi, "${P}:${R}:${SENSOR}_ValidR")
{
# FIXME: remove this once the OPIs are updated
  alias("${P}:${R}:${SENSOR}:ValidR")
  field(ZNAM, "Incorrect Gauge Type")
  field(ONAM, "Correct Gauge Type")
  field(ZSV,  "MAJOR")
}


record(mbbi, "${P}:${R}:${SENSOR}_FltTim-RB")
{
# FIXME: remove this once the OPIs are updated
  alias("${P}:${R}:${SENSOR}:FltTim-RB")
  field(DTYP, "Raw Soft SENSORnel")
  field(INP,  "${P}:${R}:iSensorFltTims-RB.${SOURCE} CP MSS")

  field(ZRVL, "1")
  field(ZRST, "16 ms")

  field(ONVL, "2")
  field(ONST, "160 ms")

  field(TWVL, "3")
  field(TWST, "1600 ms")

  field(FLNK, "${P}:${R}:${SENSOR}_iFltTimInit")

  field(DISV, "0")
  field(DISS, "INVALID")
  field(SDIS, "${P}:${R}:${SENSOR}_ValidR CP")
}


record(mbbo, "${P}:${R}:${SENSOR}_FltTimS")
{
# FIXME: remove this once the OPIs are updated
  alias("${P}:${R}:${SENSOR}:FltTimS")
  field(DTYP, "Raw Soft SENSORnel")

  field(ZRVL, "1")
  field(ZRST, "16 ms")

  field(ONVL, "2")
  field(ONST, "160 ms")

  field(TWVL, "3")
  field(TWST, "1600 ms")

# Cannot go directly to SensorFltTimsS as this PV needs to be processed when updated from -RB
  field(FLNK, "${P}:${R}:${SENSOR}_FltTimCommitS")
}


record(fanout, "${P}:${R}:${SENSOR}_FltTimCommitS")
{
# FIXME: remove this once the OPIs are updated
  alias("${P}:${R}:${SENSOR}:FltTimCommitS")
# Dynamically disabled by iFltTimInit-FO when FltTimS is updated from its -RB
  field(FLNK, "${P}:${R}:SensorFltTimsS")
}


record(seq, "${P}:${R}:${SENSOR}_iConnect-FltTim-FO")
{
  field(DOL1, "0")
  field(LNK1, "${P}:${R}:${SENSOR}_iFltTimInit2.PVAL")
}


# if FltTim-RB is valid
record(calcout, "${P}:${R}:${SENSOR}_iFltTimInit")
{
  field(INPA, "${P}:${R}:${SENSOR}_FltTim-RB MS")
  field(OUT,  "${P}:${R}:${SENSOR}_iFltTimInit2.PROC")
  field(IVOA, "Don't drive outputs")
}


# and FltTim-RB is different from iPrevFltTim
record(calcout, "${P}:${R}:${SENSOR}_iFltTimInit2")
{
  field(INPA, "${P}:${R}:${SENSOR}_FltTim-RB")
  field(INPB, "${P}:${R}:${SENSOR}_iPrevFltTim")
  field(OUT,  "${P}:${R}:${SENSOR}_iPrevFltTim.PROC PP")
  field(VAL,  "0")
  field(CALC, "A!=B")
  field(OOPT, "Transition To Non-zero")
}


# then update iPrevFltTim
record(longin, "${P}:${R}:${SENSOR}_iPrevFltTim")
{
  field(INP,  "${P}:${R}:${SENSOR}_FltTim-RB")
  field(VAL,  "-1")
  field(FLNK, "${P}:${R}:${SENSOR}_iFltTimInit-FO")
}


# and update FltTimS too
record(seq, "${P}:${R}:${SENSOR}_iFltTimInit-FO")
{
  field(DOL1, "1")
  field(LNK1, "${P}:${R}:${SENSOR}_FltTimCommitS.DISA")

  field(DOL2, "${P}:${R}:${SENSOR}_FltTim-RB")
  field(LNK2, "${P}:${R}:${SENSOR}_FltTimS PP")

  field(DOL3, "0")
  field(LNK3, "${P}:${R}:${SENSOR}_FltTimCommitS.DISA")
}
