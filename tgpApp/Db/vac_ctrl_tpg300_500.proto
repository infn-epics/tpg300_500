################################################################################
#
# Protocol file for Pfeiffer TPG-300 gauge controller
#
################################################################################

OutTerminator = LF;
InTerminator  = CR LF;

ReplyTimeout = 5000;
ReadTimeout  = 2500;

# Larger LockTimeout due to increased ReplyTimeout in set_save_params protocol.
LockTimeout = 10000;

################################################################################
# Shared "protocol"
################################################################################
reconnect {
    out ETX;
    disconnect;
    connect 1000;
}


################################################################################
# Force disconnect on timeouts to achieve consistent behavior with respect to
# readback updates when the device is power cycled and is connected through a MOXA.
################################################################################
@replytimeout {
    reconnect;
}


################################################################################
# Force disconnect on timeouts to achieve consistent behavior with respect to
# readback updates when the device is power cycled and is connected through a MOXA.
################################################################################
@readtimeout {
    reconnect;
}


################################################################################
# General mismatch handler, basically a no-op
################################################################################
@mismatch {
    in  NAK;
}


################################################################################
# Clear the input buffer of the controller
################################################################################
reset_interface {
    out ETX;
}


################################################################################
# Retrieves the error code
# PV: calcout / scalcout
#  E: error code
################################################################################
get_error_code {
    out "ERR";
    in  ACK;
    out ENQ;
    in  "%(E)d";
}


################################################################################
# Simple ACK/ENQ pair for protocols without further error processing
# PV: <any>
################################################################################
enquery {
    in  ACK;
    out ENQ;
}


################################################################################
# An ACK/ENQ pair that clears the field 'E' of the connected PV
#  for protocols that do record the error code
# PV: calcout / scalcout
#  E: error code
################################################################################
enquery_with_error_reset {
    in  ACK "%(E)?d";
    out ENQ;

# Unfortunately exception handlers are _NOT_ inherited by the calling protocol,
#  so it needs to be copy-pasted !
    @mismatch {
        in  NAK;
        out ENQ;
        in  "%(E)d";
    }
}


################################################################################
# Get underrange control
# PV: bi
################################################################################
get_puc {
    out "PUC";
    enquery;
    in  "%d";
}


################################################################################
# Set underrange control
# PV: bo
################################################################################
set_puc {
    out "PUC,%d";
    enquery;
    in  "%*d";
}


################################################################################
# Get unit of measurement
# PV: mbbi
################################################################################
get_units {
    out "UNI";
    enquery;
    in  "%d";
}


################################################################################
# Set unit of measurement
# PV: mbbo
################################################################################
set_units {
    out "UNI,%d";
    enquery;
    in  "%*d";
}


################################################################################
# Get parameter storage
# PV: mbbi
################################################################################
get_save_params {
    out "SAV";
    enquery;
    in  "%d";
}


################################################################################
# Set parameter storage and save parameters
# PV: mbbo
# Saving user defined parameters takes significantly longer (~3s).
################################################################################
set_save_params {
    ReplyTimeout = 7000;

    out "SAV,%d";
    enquery;
    in  "%*d";
}


################################################################################
# Get baud rate
# PV: mbbi
################################################################################
get_baud {
    out "BAU";
    enquery;
    in  "%d";
}


################################################################################
# Set baud rate
# PV: mbbo
################################################################################
set_baud {
    out "BAU,%d";
    in  ACK;
# After the baud rate is changed, we can no longer communicate with the device
#  the MOXA needs to be reconfigured
    disconnect;
}


################################################################################
# Retrieve program version
# PV: stringin
################################################################################
get_version {
    out "PNR";
    enquery;
    in  "%#s";
}


################################################################################
# Get plugin board configuration
# PV: scalcout
#  AA: first board
#  BB: second board
#  CC: third board
#
# A and B
#  Pirani
#             PI 300D
#             PI 300DN
#  Cold cathode
#             PE 300DC9
#  Pirani / Cold cathode combined
#             CP 300C9
#             CP 300C10
#             CP 300T11
#             CP 300T11L
# C
#  RS232C interface (D-Sub-Connector) and Relays
#             IF 300A
#  RS232C interface (cable) and Relays
#             IF 300B
#  RS422 interface and Relays
#             IF 300C
#  Profibus-DP interface and Relays
#             IF 300P
################################################################################
get_slots {
    out "TID";
   # enquery_with_error_reset;
    enquery;
    in  "%(AA)[^,],"
        "%(BB)[^,],"
        "%(CC)[^,]";

    @mismatch {
        in  NAK;
        out ENQ;
        in  "%(E)d";
    }
}

get_slots_all {
    out "TID";
    enquery;
    in  "%(S1)[^,],%(S2)[^,],%(S3)[^\r\n]";
}

get_slots_raw {
    out "TID";
    enquery;
    in  "%#s";
}

################################################################################
# Get pressure
# Protocol arguments:
#  1. Sensor ID; A1, A2, B1, B2
# PV: scalcout
#   A: status
#  BB: pressure
################################################################################
get_pressure {
    out "P\$1";
    enquery_with_error_reset;
    in  "%(A)d,%(BB)s";

    @mismatch {
        in  NAK;
        out ENQ;
        in  "%(E)d";
    }
}

getPressure {
    out "P\$1";
    enquery;
    in "%(\$2)i,%E";
}

################################################################################
# Get sensor modes
# PV: calcout
#  A: sensor A1
#  B: sensor A2
#  C: sensor B1
#  D: sensor B2
################################################################################
get_modes {
    out "SEN";
    enquery;
    in  "%(A)d,"
        "%(B)d,"
        "%(C)d,"
        "%(D)d";
}


################################################################################
# Control sensors
# PV: calcout
#  A: sensor A1
#  B: sensor A2
#  C: sensor B1
#  D: sensor B2
#  E: error
################################################################################
set_modes {
    out "SEN,%(A)d,"
            "%(B)d,"
            "%(C)d,"
            "%(D)d";
    enquery_with_error_reset;
    in  "%*d,%*d,%*d,%*d";

    @mismatch {
        in  NAK;
        out ENQ;
        in  "%(E)d";
    }
}


################################################################################
# Control sensor A1
# PV: calcout
#  A: sensor A1
#  E: error
################################################################################
set_mode_A1 {
    out "SEN,%(A)d,0,0,0";
    enquery_with_error_reset;
    in  "%*d,%*d,%*d,%*d";

    @mismatch {
        in  NAK;
        out ENQ;
        in  "%(E)d";
    }
}


################################################################################
# Control sensor A2
# PV: calcout
#  A: sensor A2
#  E: error
################################################################################
set_mode_A2 {
    out "SEN,0,%(A)d,0,0";
    enquery_with_error_reset;
    in  "%*d,%*d,%*d,%*d";

    @mismatch {
        in  NAK;
        out ENQ;
        in  "%(E)d";
    }
}


################################################################################
# Control sensor B1
# PV: calcout
#  A: sensor B1
#  E: error
################################################################################
set_mode_B1 {
    out "SEN,0,0,%(A)d,0";
    enquery_with_error_reset;
    in  "%*d,%*d,%*d,%*d";

    @mismatch {
        in  NAK;
        out ENQ;
        in  "%(E)d";
    }
}


################################################################################
# Control sensor B2
# PV: calcout
#  A: sensor B2
#  E: error
################################################################################
set_mode_B2 {
    out "SEN,0,0,0,%(A)d";
    enquery_with_error_reset;
    in  "%*d,%*d,%*d,%*d";

    @mismatch {
        in  NAK;
        out ENQ;
        in  "%(E)d";
    }
}


################################################################################
# Get filter time constant
# PV: calcout
#  A: sensor A1
#  B: sensor A2
#  C: sensor B1
#  D: sensor B2
################################################################################
get_filter {
    out "FIL";
    enquery;
    in  "%(A)d,"
        "%(B)d,"
        "%(C)d,"
        "%(D)d";
}


################################################################################
# Set filter time constant
# PV: calcout
#  A: sensor A1
#  B: sensor A2
#  C: sensor B1
#  D: sensor B2
#  E: error
################################################################################
set_filter {
    out "FIL,%(A)d,"
            "%(B)d,"
            "%(C)d,"
            "%(D)d";
    enquery_with_error_reset;
    in  "%*d,%*d,%*d,%*d";

    @mismatch {
        in  NAK;
        out ENQ;
        in  "%(E)d";
    }
}


################################################################################
# Get switching function thresholds and assignment
# Protocol arguments:
#  1. Function number: 1, 2, 3, 4, A, B
# PV: calcout
#  A: Lower threshold
#  B: Upper threshold
#  C: Switching function
################################################################################
get_function {
    out "SP\$1";
    enquery;
    in  "%(A)E,"
        "%(B)E,"
        "%(C)d";
}


################################################################################
# Set switching function thresholds and assignment
# Protocol arguments:
#  1. Function number: 1, 2, 3, 4, A, B
# PV: calcout
#  A: Lower threshold
#  B: Upper threshold
#  C: Switching function
#  E: Error
################################################################################
set_function {
    out "SP\$1,%(A)1.1E,"
              "%(B)1.1E,"
              "%(C)d";
    enquery_with_error_reset;
    in  "%*E,%*E,%*d";

    @mismatch {
        in  NAK;
        out ENQ;
        in  "%(E)d";
    }
}


################################################################################
# Get switching function status. TPG300 only!
# PV: calcout
#  A: Switching function 1
#  B: Switching function 2
#  C: Switching function 3
#  D: Switching function 4
#  E: Switching function A
#  F: Switching function B
################################################################################
get_func_stat {
    out "SPS";
    enquery;
    in  "%(A)d,"
        "%(B)d,"
        "%(C)d,"
        "%(D)d,"
        "%(E)d,"
        "%(F)d";
}



################################################################################
################################################################################
##
## Protocols specific for Pfeiffer TPG-500 gauge controller
##
################################################################################
################################################################################


################################################################################
# Get device identification strings
# PV: scalcout
#  AA: Device type
#  BB: Article number / Part number
#  CC: Serial number
#  DD: Firmware version (the same as get_version())
#  EE: Hardware version
#   E: is special. It is set to 42 by EPICS and will be reset to zero on error
################################################################################
identify_device {
    out "AYT";
    enquery_with_error_reset;
    in  "%(AA)[^,],"
        "%(BB)[^,],"
        "%(CC)[^,],"
        "%(DD)[^,],"
        "%(EE)[^,]";
}

identify_device_raw {
    out "AYT";
    enquery;
    in  "%#s";
}


################################################################################
# Get device temperature
# PV: ai
# EGU: C
################################################################################
get_temp {
    out "TMP";
    enquery;
    in  "%E";
}


################################################################################
# Get battery voltage
# PV: ai
# EGU: mV
################################################################################
get_bat_voltage {
    out "VBT";
    enquery;
    in  "%E";
}


################################################################################
# Get operating hours
# PV: ai
# EGU: h
################################################################################
get_oper_tim {
    out "RHR";
    enquery;
    in  "%E";
}


################################################################################
# Get due date of next recalibration
# PV: stringin
################################################################################
get_recalibration_due_date {
    out "CDA";
    enquery;
    in  "%s";
}


################################################################################
# Get error relay assignment
# PV: mbbi
################################################################################
get_error_relay_assignment {
    out "ERA";
    enquery;
    in  "%d";
}


################################################################################
# Set error relay assignment
# PV: mbbo
################################################################################
set_error_relay_assignment {
    out "ERA,%d";
    enquery;
    in  "%*d";
}


################################################################################
# Get analog output mode
# PV: mbbi
################################################################################
get_ao_mode {
    out "AOM";
    enquery;
    in  "%d";
}


################################################################################
# Set analog output mode
# PV: mbbo
################################################################################
set_ao_mode {
    out "AOM,%d";
    enquery;
    in  "%*d";
}


################################################################################
# Get gauge names
# PV: scalcout
#  AA: Gauge on A1
#  BB: Gauge on A2
#  CC: Gauge on B1
#  DD: Gauge on B2
################################################################################
get_gauge_names {
    out "CID";
    enquery;
    in  "%(AA)[^,],"
        "%(BB)[^,],"
        "%(CC)[^,],"
        "%(DD)[^,]";
}


################################################################################
# Set gauge names
# PV: scalcout
#  AA: Gauge on A1
#  BB: Gauge on A2
#  CC: Gauge on B1
#  DD: Gauge on B2
#   E: error code
################################################################################
set_gauge_names {
    out "CID,"
        "%(AA)s,"
        "%(BB)s,"
        "%(CC)s,"
        "%(DD)s";
    enquery_with_error_reset;
    in  "%*[^,],"
        "%*[^,],"
        "%*[^,],"
        "%*[^,]";

    @mismatch {
        in  NAK;
        out ENQ;
        in  "%(E)d";
    }
}


################################################################################
# Get switching function status of TPG500
# PV: calcout
#  A: Switching function 1
#  B: Switching function 2
#  C: Switching function 3
#  D: Switching function 4
################################################################################
get_func_stat_tpg500 {
    out "SPS";
    enquery;
    in  "%(A)d,"
        "%(B)d,"
        "%(C)d,"
        "%(D)d";
}


################################################################################
# Get pressure values from all gauges
# PV: scalcout
#   A: status of gauge A1
#  AA: pressure of gauge A1
#   B: status of gauge A2
#  BB: pressure of gauge A2
#   C: status of gauge B1
#  CC: pressure of gauge B1
#   D: status of gauge B2
#  DD: pressure of gauge B2
################################################################################
get_pressures {
    out "PRX";
    enquery_with_error_reset;
    in  "%(A)d,%(AA)[^,],"
        "%(B)d,%(BB)[^,],"
        "%(C)d,%(CC)[^,],"
        "%(D)d,%(DD)s";

    @mismatch {
        in  NAK;
        out ENQ;
        in  "%(E)d";
    }
}
