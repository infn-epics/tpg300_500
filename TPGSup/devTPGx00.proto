OutTerminator = LF;
InTerminator  = CR LF;

ReplyTimeout = 5000;
ReadTimeout  = 2500;


LockTimeout = 10000;


################################################################################
# Shared "protocol"
################################################################################
reconnect {
    out ETX;
    disconnect;
    connect 1000;
}


################################################################################
# Force disconnect on timeouts to achieve consistent behavior with respect to
# readback updates when the device is power cycled and is connected through a MOXA.
################################################################################
@replytimeout {
    reconnect;
}


################################################################################
# Force disconnect on timeouts to achieve consistent behavior with respect to
# readback updates when the device is power cycled and is connected through a MOXA.
################################################################################
@readtimeout {
    reconnect;
}


################################################################################
# General mismatch handler, basically a no-op
################################################################################
@mismatch {
    in  NAK;
}


################################################################################
# Clear the input buffer of the controller
################################################################################
reset_interface {
    out ETX;
}

# Common communication for TPG300 and TPG500

# How TPGx00 Communication Protocol works:
# First send a command (e.g. ask for the pressure) then the device will return ACK.
# Then send ENQ to get the actual value.
#
# An example:          (S: Send, R: Recieve)
# S: <Command><CR><LF>
# R: <ACK><CR><LF>
# S: <ENQ>                  !!! important that this is not terminated with <CR><LF> which would couse syntax error
# R: <Data><CR><LF>

# According to the streamdevice manual, once an "out" is sent access to the
# device is exclusively locked until the WHOLE protocol is finished.
# This should mean that we do not need to worry about commands interrupting each other

################################################################################
# Simple ACK/ENQ pair for protocols without further error processing
# PV: <any>
################################################################################
enquery {
    in  ACK;
    out ENQ;
}

enquery_with_error {
    enquery;

    @mismatch {
        in  NAK;
    }
}
enquery_with_error_reset {
    in  ACK "%(E)?d";
    out ENQ;

    @mismatch {
        in  NAK;
        out ENQ;
        in  "%(E)d";
    }
}
getPressure {
    out "P\$1";
    enquery;
    @mismatch {
        in  NAK;
    }
    in "%(\$2)i,%E";
}
get_pressures {
    out "PRX";
    enquery_with_error;
    in  "%#s";
}

get_slots_raw {
    out "TID";
    enquery;
    in  "%#s";
}

get_slots {
    out "TID";
    enquery_with_error;
    in "%(\$1)[_a-zA-Z0-9 ],%(\$2)[_a-zA-Z0-9 ],%(\$3)[_a-zA-Z0-9 ]";
    
}
getUnits {
    out "UNI";
	enquery;
    in "%d";
}

setUnits {
    out "UNI,%d";
	enquery;
    in "%d";
    @init{ getUnits; }
}

# The device requires the values we send to all have exponents, but does not allow leading zeroes on them, so we strip them with some regex post-processing
setFunction {
    out "SP%(\$1)s,%(\$1\$2).1E,%(\$1\$3).1E,%(\$1\$4)d%#/E(\+|-)0(\d)/E\1\2/";
    in ACK;
    out ENQ;
    in "%s";
}

# on INTER we seem to get less values returned than the manual says
# however we didn't use these anyway, so use ExtraInput = Ignore to cover
# case when behaves like the manual says 
getFunctionsStatus {
    ExtraInput = Ignore;
    out "SPS";
    enquery;
    in "%(\$1:1:RB:RAW.A){0|1},%(\$1:2:RB:RAW.A){0|1},%(\$1:3:RB:RAW.A){0|1},%(\$1:4:RB:RAW.A){0|1}";
}

getErrorStatus {
    out "ERR";
    enquery;
    in "%b";
}


################################################################################
# Retrieve program version
# PV: stringin
################################################################################
get_info {
    out "\$1";
    enquery;
    in  "%#s";
}



identify_device_raw {
    out "AYT";
    enquery;
    in  "%#s";
}

################################################################################
# Get sensor modes
# PV: calcout
#  A: sensor A1
#  B: sensor A2
#  C: sensor B1
#  D: sensor B2
################################################################################
get_modes {
    out "SEN";
    enquery;
    in  "%(A)d,"
        "%(B)d,"
        "%(C)d,"
        "%(D)d";
}


################################################################################
# Control sensors
# PV: calcout
#  A: sensor A1
#  B: sensor A2
#  C: sensor B1
#  D: sensor B2
#  E: error
################################################################################
set_modes {
    out "SEN,%(\$1)d,%(\$2)d,%(\$3)d,%(\$4)d";
    enquery_with_error;
    in  "%(\$5)d,%(\$6)d,%(\$7)d,%(\$8)d";

   
}
set_filters {
    out "FIL,%(\$1)d,%(\$2)d,%(\$3)d,%(\$4)d";
    enquery_with_error;
    in  "%(\$5)d,%(\$6)d,%(\$7)d,%(\$8)d";

   
}

function_status {
    out "SPS";
    enquery_with_error;
    in  "%(\$1)d,%(\$2)d,%(\$3)d,%(\$4)d,%(\$5)d,%(\$6)d";

   
}
enable_function {
    out "SP\$1,%(\$2).1E,%(\$3).1E,%(\$4)d";
    enquery_with_error;
    in  "%(\$5)E,%(\$6)E,%(\$7)d";

}

disable_function {
    out "SP\$1,%(\$2).1E,%(\$3).1E,0";
    enquery_with_error;
    in  "%(\$4)E,%(\$5)E,%(\$6)d";

}


set_mode_A1 {
    out "SEN,%(\$1)d,0,0,0";
    enquery_with_error;
    in  "%(\$2)d,%*d,%*d,%*d";
   
}
set_mode_A2 {
    out "SEN,0,%(\$1)d,0,0";
    enquery_with_error;
    in  "%*d,%(\$2)d,%*d,%*d";
   
}

set_mode_B1 {
    out "SEN,0,0,%(\$1)d,0";
    enquery_with_error;
    in  "%*d,%*d,%(\$2)d,%*d";
   
}


set_mode_B2 {
    out "SEN,0,0,0,%(\$1)d";
    enquery_with_error;
    in  "%*d,%*d,%*d,%(\$2)d";
   
}



set_filter_A1 {
    out "FIL,%(\$1)d,0,0,0";
    enquery_with_error;
    in  "%(\$2)d,%*d,%*d,%*d";
   
}
set_filter_A2 {
    out "FIL,0,%(\$1)d,0,0";
    enquery_with_error;
    in  "%*d,%(\$2)d,%*d,%*d";
   
}

set_filter_B1 {
    out "FIL,0,0,%(\$1)d,0";
    enquery_with_error;
    in  "%*d,%*d,%(\$2)d,%*d";
   
}


set_filter_B2 {
    out "FIL,0,0,0,%(\$1)d";
    enquery_with_error;
    in  "%*d,%*d,%*d,%(\$2)d";
   
}



################################################################################
# Get underrange control
# PV: bi
################################################################################
get_puc {
    out "PUC";
    enquery;
    in  "%d";
}


################################################################################
# Set underrange control
# PV: bo
################################################################################
set_puc {
    out "PUC,%d";
    enquery;
    in  "%*d";
}

