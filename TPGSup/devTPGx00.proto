InTerminator = CR LF;
ReplyTimeout = 2000;
LockTimeout = 10000;

# Common communication for TPG300 and TPG500

# How TPGx00 Communication Protocol works:
# First send a command (e.g. ask for the pressure) then the device will return ACK.
# Then send ENQ to get the actual value.
#
# An example:          (S: Send, R: Recieve)
# S: <Command><CR><LF>
# R: <ACK><CR><LF>
# S: <ENQ>                  !!! important that this is not terminated with <CR><LF> which would couse syntax error
# R: <Data><CR><LF>

# According to the streamdevice manual, once an "out" is sent access to the
# device is exclusively locked until the WHOLE protocol is finished.
# This should mean that we do not need to worry about commands interrupting each other

getPressure {
    out "\$1" CR LF;
    in ACK;
	out ENQ;
    in "%(\$2)i,%E";
}

getUnits {
    out "UNI" CR LF;
	in ACK;
	out ENQ;
    in "%d";
}

setUnits {
    out "UNI,%d" CR LF;
	in ACK;
	out ENQ;
    in "%d";
    @init{ getUnits; }
}

# The device requires the values we send to all have exponents, but does not allow leading zeroes on them, so we strip them with some regex post-processing
setFunction {
    out "SP%(\$1)s,%(\$1\$2).1E,%(\$1\$3).1E,%(\$1\$4)d%#/E(\+|-)0(\d)/E\1\2/" CR LF;
    in ACK;
    out ENQ;
    in "%s";
}

# on INTER we seem to get less values returned than the manual says
# however we didn't use these anyway, so use ExtraInput = Ignore to cover
# case when behaves like the manual says 
getFunctionsStatus {
    ExtraInput = Ignore;
    out "SPS" CR LF;
    in ACK;
    out ENQ;
    in "%(\$1:1:RB:RAW.A){0|1},%(\$1:2:RB:RAW.A){0|1},%(\$1:3:RB:RAW.A){0|1},%(\$1:4:RB:RAW.A){0|1}";
}

getErrorStatus {
    out "ERR" CR LF;
    in ACK;
    out ENQ;
    in "%b";
}
